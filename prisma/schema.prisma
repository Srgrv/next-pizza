// generator client { ... }: Это объявление секции генератора в файле schema.prisma.
// client — это имя генератора, но обычно используется для генерации Prisma Client.
// provider = "prisma-client-js": Это строка, указывающая, какой тип клиента нужно сгенерировать.
// prisma-client-js — это стандартное значение для генерации клиента Prisma на JavaScript/TypeScript.
// После запуска команды prisma generate Prisma сгенерирует клиентский код на основе вашей схемы. Этот код будет находиться в папке node_modules/@prisma/client и будет включать классы и методы для работы с вашей базой данных.

generator client {
    provider = "prisma-client-js"
}

// Это объявление источника данных, которое указывает Prisma, какой тип базы данных вы используете и как к ней подключиться. Здесь db — это имя источника данных, которое вы можете использовать в схемах и запросах Prisma. Это имя произвольно, и вы можете использовать любое другое имя, если оно не конфликтует с другими именами в файле.

// Эта строка указывает тип базы данных, с которой Prisma будет работать. В данном случае это postgresql, что означает, что Prisma будет подключаться к базе данных PostgreSQL.

// Примеры других провайдеров включают:
// mysql для MySQL
// sqlite для SQLite

// Эта строка задает URL подключения к базе данных, который Prisma будет использовать для доступа к базе данных. В данном случае используется функция env, чтобы получить значение переменной окружения DATABASE_URL. env("DATABASE_URL") означает, что Prisma будет искать переменную окружения с именем DATABASE_URL и использовать ее значение в качестве строки подключения.


// url: Это основной URL подключения к базе данных, который Prisma использует для работы с пулом подключений. Этот пул управляет соединениями с базой данных, что помогает улучшить производительность и эффективность работы с запросами.

// directUrl: Это URL для прямого подключения к базе данных, который Prisma использует для некоторых операций, когда требуется обойти пул подключений. Это может быть полезно для ситуаций, когда важно работать с базой данных напрямую, например, при выполнении миграций или для отладки.

datasource db {
    provider = "postgresql"
    url = env("POSTGRES_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
    id Int @id @default(autoincrement())
    fullName String
    email String @unique
    password String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Category {
    id Int @id @default(autoincrement())
    name String @unique
    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    id Int @id @default(autoincrement())
    name String
    imageUrl String

    ingredients Ingredient[] 

    category Category @relation(fields: [categoryId], references: [id])
    categoryId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Ingredient {
    id Int @id @default(autoincrement())

    name String
    price Int
    imageUrl String

    products Product[] 

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}